#!/usr/bin/env bash

set -eu -o pipefail

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------
green="\033[32m"
reset="\033[0m"

conversations_dir="$HOME/.gpt/conversations"
conversation_file="$conversations_dir/$(date +%s).txt"

title="New conversation"
conversation=()
tmp=$(mktemp)

# Ensure the conversations directory exists
mkdir -p "$conversations_dir"

# ------------------------------------------------------------------------------
# Check for required tools and environment variables
# ------------------------------------------------------------------------------
if ! command gpt --help &> /dev/null; then
  echo >&2 "Error: gpt is not installed or is not on your PATH"
  exit 1
fi

if ! command gum --help &> /dev/null; then
  echo >&2 "Error: gum is not installed or is not on your PATH"
  echo >&2 "See https://github.com/charmbracelet/gum for installation instructions"
  echo >&2 "Or just 'brew install gum' on macOS (with homebrew, obv)"
  exit 1
fi

gpt --check

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
serialize_conversation() {
  local output=""

  for ((i = 0; i < ${#conversation[@]}; i += 2)); do
    local prefix
    local msg="${conversation[i + 1]}"

    case "${conversation[i]}" in
      -u)
        prefix="User"
        ;;
      -s)
        prefix="System"
        ;;
      *)
        echo >&2 "Unknown type: ${conversation[i]}"
        exit 1
        ;;
    esac

    output+="${prefix}: ${msg}\n"
  done

  echo "$output"
}

save_conversation() {
  local convo

  convo=$(serialize_conversation)
  title=$(gpt -u "In one short phrase, what was this conversation about? $convo")

  echo "Title: $title" > "$conversation_file"
  echo -e "$convo" | sed 's/[[:space:]]*$//' >> "$conversation_file"
}

restore_conversation() {
  local current_prefix=""
  local current_message=""

  conversation_file="$1"
  conversation=()

  if [[ ! -e "$conversation_file" ]]; then
    echo >&2 "Conversation file does not exist: $conversation_file"
    exit 1
  fi

  while IFS= read -r line; do
    # Skip the title line
    if [[ "$line" == "Title:"* ]]; then
      title="${line#*: }"

    # Detect prefix (either User: or System:) in the line
    elif [[ "$line" == "User:"* ]] || [[ "$line" == "System:"* ]]; then
      # Remove trailing whitespace from current_message
      current_message=$(echo -n "$current_message" | sed 's/[[:space:]]*$//')

      # If we were collecting a message, add it to the array
      if [ -n "$current_message" ]; then
        conversation+=("$current_prefix" "$current_message")
      fi

      # Set new prefix and clear the current message
      current_prefix=$([[ "$line" == "User:"* ]] && echo "-u" || echo "-s")
      current_message="${line#*: }"

    else
      # Append to the current message
      current_message+=$'\n'"$line"
    fi
  done < "$conversation_file"

  # Remove trailing whitespace from last message
  current_message=$(echo -n "$current_message" | sed 's/[[:space:]]*$//')

  # Add the last message to the array if it exists
  if [ -n "$current_message" ]; then
    conversation+=("$current_prefix" "$current_message")
  fi
}

print_conversation_title() {
  echo -e "${green}Conversation:${reset} $title"
  echo -e "${green}----------${reset}"
  echo
}

repeat_conversation() {
  local prefix
  local msg

  print_conversation_title

  for ((i = 0; i < ${#conversation[@]}; i += 2)); do
    msg="${conversation[i + 1]}"

    case "${conversation[i]}" in
      -u)
        prefix="${green}You:${reset}"
        ;;
      -s)
        prefix="${green}GPT:${reset}"
        ;;
    esac

    echo -e "$prefix"
    echo -e "$msg"
    echo
  done
}

list_conversations() {
  local filename

  for filename in "$conversations_dir"/*.txt; do
    if [[ -f "$filename" ]]; then
      awk '/^Title: / { print substr($0, 8); exit }' "$filename"
    fi
  done
}

select_conversation() {
  local choice
  local file

  choice=$(list_conversations | gum filter --fuzzy --sort)
  file=$(find "$conversations_dir" -name "*.txt" -exec grep -l "^Title: $choice" {} \;)

  restore_conversation "$file"
}

copy_file_to_clipboard() {
  local file_path="$1"

  if [[ "$(uname)" == "Darwin" ]]; then
    pbcopy < "$file_path"
  elif [[ "$(uname)" == "Linux" ]]; then
    if command -v xclip > /dev/null; then
      xclip -selection clipboard < "$file_path"
    elif command -v xsel > /dev/null; then
      xsel -b < "$file_path"
    else
      echo >&2 "xclip or xsel is not installed."
    fi
  else
    echo >&2 "copy file not implemented for $(uname)"
  fi
}

converse() {
  local placeholder="ctrl-d submits; esc cancels; send \\f to copy a file to clipboard"

  while true; do
    msg=$(gum write --width 100 --height 10 --char-limit 0 --placeholder "$placeholder" || true)

    case "$msg" in
      '')
        break
        ;;

      '\f')
        copy_file_to_clipboard "$(gum file .)"
        ;;

      *)
        conversation+=(-u "$msg")

        echo -e "${green}You:${reset}"
        echo "$msg"
        echo

        echo -e "${green}GPT:${reset}"
        gpt --no-cache "${conversation[@]}" | tee "$tmp"

        conversation+=(-s "$(cat "$tmp")")

        save_conversation
        ;;
    esac
  done
}

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
new_conversation="New conversation"
load_conversation="Load conversation"
quit="Quit (escape)"
choices=("$new_conversation" "$load_conversation" "$quit")

while true; do
  case "$(gum choose --ordered "${choices[@]}")" in
    "$new_conversation")
      print_conversation_title
      converse
      ;;

    "$load_conversation")
      select_conversation
      repeat_conversation
      converse
      ;;

    "$quit" | "")
      exit 0
      ;;
  esac
done
