#!/usr/bin/env bash

set -eu -o pipefail

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------
CONVERSATIONS_DIR="${BASHGPT_CONVERSATION_HISTORY_DIR:-$HOME/.gpt/conversations}"
CONVERSATION_FILE="$CONVERSATIONS_DIR/$(date +%s).txt"
CONVERSATION_TMP=$(mktemp)

TITLE="New conversation"
TITLE_SET=false
declare -a CONVERSATION=()

# Ensure the conversations directory exists
mkdir -p "$CONVERSATIONS_DIR"

# ------------------------------------------------------------------------------
# Check for required tools and environment variables
# ------------------------------------------------------------------------------
if ! command gpt --help &> /dev/null; then
  echo >&2 "Error: gpt is not installed or is not on your PATH"
  echo >&2 "  - See https://github.com/sysread/bash-gpt for installation instructions"
  exit 1
fi

if ! command gum --help &> /dev/null; then
  echo >&2 "Error: gum is not installed or is not on your PATH"
  echo >&2 "  - See https://github.com/charmbracelet/gum for installation instructions"
  echo >&2 "  - Or just 'brew install gum' on macOS (with homebrew, obv)"
  exit 1
fi

gpt --check

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
usage() {
  local exit_code="${1:-0}"

  cat << EOL

usage: chat [OPTIONS]

Options:
  --help      | -h                 show help information

Environmental variables:

  OPENAI_API_KEY                   your OpenAI API key (required; create one at https://beta.openai.com/account/api-keys)
  OPENAI_MODEL                     the model to use; defaults to gpt-3.5-turbo-16k
  BASHGPT_CONVERSATION_HISTORY_DIR the directory to store conversation history; defaults to ~/.gpt/conversations
EOL

  exit "$exit_code"
}

serialize_conversation() {
  local output=""

  for ((i = 0; i < ${#CONVERSATION[@]}; i += 2)); do
    local prefix
    local msg="${CONVERSATION[i + 1]}"

    case "${CONVERSATION[i]}" in
      -u)
        prefix="User"
        ;;
      -s)
        prefix="System"
        ;;
      *)
        echo >&2 "Unknown type: ${CONVERSATION[i]}"
        exit 1
        ;;
    esac

    output+="${prefix}: ${msg}\n"
  done

  echo "$output"
}

update_title() {
  # Only set the title if it hasn't been set yet
  if [ "$TITLE_SET" = false ]; then
    local serialized_conversation="$1"
    TITLE=$(OPENAI_MODEL="gpt-3.5-turbo-16k" gpt -u "In 10 words or less summarize this text: $serialized_conversation")
    TITLE_SET=true
  fi
}

save_conversation() {
  local convo

  convo=$(serialize_conversation)
  update_title "$convo"

  echo "Title: $TITLE" > "$CONVERSATION_FILE"
  echo -e "$convo" | sed 's/[[:space:]]*$//' >> "$CONVERSATION_FILE"
}

restore_conversation() {
  local current_prefix=""
  local current_message=""

  CONVERSATION_FILE="$1"
  CONVERSATION=()

  if [[ ! -e "$CONVERSATION_FILE" ]]; then
    echo >&2 "Conversation file does not exist: $CONVERSATION_FILE"
    exit 1
  fi

  while IFS= read -r line; do
    # Skip the title line
    if [[ "$line" == "Title:"* ]]; then
      TITLE="${line#*: }"
      TITLE_SET=true

    # Detect prefix (either User: or System:) in the line
    elif [[ "$line" == "User:"* ]] || [[ "$line" == "System:"* ]]; then
      # Remove trailing whitespace from current_message
      current_message=$(echo -n "$current_message" | sed 's/[[:space:]]*$//')

      # If we were collecting a message, add it to the array
      if [ -n "$current_message" ]; then
        CONVERSATION+=("$current_prefix" "$current_message")
      fi

      # Set new prefix and clear the current message
      current_prefix=$([[ "$line" == "User:"* ]] && echo "-u" || echo "-s")
      current_message="${line#*: }"

    else
      # Append to the current message
      current_message+=$'\n'"$line"
    fi
  done < "$CONVERSATION_FILE"

  # Remove trailing whitespace from last message
  current_message=$(echo -n "$current_message" | sed 's/[[:space:]]*$//')

  # Add the last message to the array if it exists
  if [ -n "$current_message" ]; then
    CONVERSATION+=("$current_prefix" "$current_message")
  fi
}

repeat_conversation() {
  local prefix
  local msg

  for ((i = 0; i < ${#CONVERSATION[@]}; i += 2)); do
    msg="${CONVERSATION[i + 1]}"

    case "${CONVERSATION[i]}" in
      -u)
        prefix="$(gum style --foreground="#00FF00" 'You: ')"
        ;;
      -s)
        prefix="$(gum style --foreground="#00FF00" 'GPT: ')"
        ;;
    esac

    echo -e "$prefix"
    echo "$msg" | gum format
  done
}

list_conversations() {
  shopt -s nullglob   # Ensure that a glob expands to nothing if there are no matching files
  shopt -s nocaseglob # Case insensitive matching

  # Store the filenames and their modification times in an array
  files_mtime=()
  for file in "$CONVERSATIONS_DIR"/*.txt; do
    if [[ -f "$file" ]]; then
      # Append the modification time and the filename to the array
      files_mtime+=("$(stat -f "%m %N" "$file")")
    fi
  done

  # Sort the array by the modification times in reverse order
  # shellcheck disable=SC2207
  IFS=$'\n' files_mtime=($(sort -nr <<< "${files_mtime[*]}"))
  unset IFS

  # Extract the filenames from the sorted array, and print the title from each file
  for line in "${files_mtime[@]}"; do
    file="$(cut -d ' ' -f 2- <<< "$line")"
    awk '/^Title: / { print substr($0, 8); exit }' "$file"
  done

  shopt -u nullglob   # Unset the nullglob option
  shopt -u nocaseglob # Unset the nocaseglob option
}

select_conversation() {
  local choice
  local file
  local options
  local height

  options=$(list_conversations)

  if [[ -z "$options" ]]; then
    gum >&2 style --foreground="#FF0000" "No conversation history found"
    echo >&2 "Press enter to continue"
    read -r

    return 1
  else
    height=$(($(tput lines) - 2)) # -2 lines for gum filter's header and input

    choice=$(
      echo "$options" \
        | gum filter \
          --header "Conversation history" \
          --placeholder "Search" \
          --no-fuzzy \
          --height "$height" \
        || true
    )

    if [ -n "$choice" ]; then
      file=$(find "$CONVERSATIONS_DIR" -name "*.txt" -exec grep -l "^Title: $choice" {} \;)
      restore_conversation "$file"
      return 0
    fi
  fi
}

attach_file() {
  local filepath="${1:-}"
  local filename
  local file_content
  local instruction

  # If no argument provided, use file picker
  if [[ -z $filepath ]]; then
    filepath=$(gum file .) || return 0
  fi

  # Ensure the file exists before proceeding
  if [[ ! -f $filepath ]]; then
    echo "File does not exist: $filepath" >&2
    return 0
  fi

  filename=$(basename "$filepath")

  instruction=$(
    gum input \
      --char-limit 0 \
      --width 100 \
      --prompt "Prompt: " \
      --value "Attached is the content of the file '$filename' for reference"
  ) || return 0

  file_content=$(cat "$filepath")

  CONVERSATION+=(-u "$instruction" -u "
\`\`\`
$file_content
\`\`\`
")
}

converse() {
  local placeholder="ctrl-d submits | esc cancels | send \\f to attach a file"
  local you_prefix
  local gpt_prefix

  you_prefix="$(gum style --foreground="#00FF00" 'You: ')"
  gpt_prefix="$(gum style --foreground="#00FF00" 'GPT: ')"

  while true; do
    msg=$(
      gum write \
        --width 100 \
        --height 20 \
        --char-limit 0 \
        --placeholder "$placeholder" \
        --header "> $TITLE" \
        --header.foreground="#00FF00" \
        || true
    )

    case "$msg" in
      '')
        break
        ;;

      '\f')
        attach_file
        ;;

      '\f '*)
        local file_path="${msg#\\f }"
        attach_file "$file_path"
        ;;

      *)
        CONVERSATION+=(-u "$msg")

        echo -e "$you_prefix"
        echo "$msg"
        echo

        echo -e "$gpt_prefix"
        gpt --no-cache "${CONVERSATION[@]}" | tee "$CONVERSATION_TMP"

        if [ ${#CONVERSATION[@]} -eq 2 ] && [ "$TITLE_SET" = false ]; then
          update_title "$msg"
        fi

        CONVERSATION+=(-s "$(cat "$CONVERSATION_TMP")")
        save_conversation

        replay=$(repeat_conversation)
        clear
        echo -e "$replay"
        echo
        ;;
    esac
  done
}

# ------------------------------------------------------------------------------
# Argument parsing
# ------------------------------------------------------------------------------
while (("$#")); do
  case "$1" in
    --help | -h)
      usage 0
      ;;

    *)
      echo >&2 "Error: unknown argument '$1'"
      usage 1
      ;;
  esac
done

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
new_conversation="New conversation"
load_conversation="Load conversation"
quit="Quit (escape)"

choices=(
  "$new_conversation"
  "$load_conversation"
  "$quit"
)

while true; do
  clear

  case "$(gum choose --height 30 --header "BashGPT" --ordered "${choices[@]}")" in
    "$new_conversation")
      clear
      TITLE="New conversation"
      TITLE_SET=false
      converse
      ;;

    "$load_conversation")
      if select_conversation; then
        clear
        repeat_conversation
        converse
      fi
      ;;

    "$quit" | "")
      exit 0

      ;;
  esac

done
