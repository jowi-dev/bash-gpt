#!/usr/bin/env bash

set -eu -o pipefail

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------
PROGRAM="${0##*/}"
OPENAI_MODEL="${OPENAI_MODEL:-gpt-3.5-turbo-16k}"

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
# shellcheck disable=SC2120
usage() {
  local exit_code="${1:-0}"

  gum format -- << EOL
_usage: $PROGRAM [OPTIONS]_

# Options
  * --help                show help information

# Commands:

## Files
  * list-files            list files
  * upload-file           upload a file
  * retrieve-file         retrieve a file's contents
  * delete-file           delete a file

## Assistant
  * create-assistant      create a new assistant
  * modify-assistant      modify an existing assistant
  * list-assistants       list assistants
  * get-assistant         get info about an assistant
  * delete-assistant      delete an assistant

## Assistant files
  * add-assistant-file    add a file to an assistant
  * list-assistant-files  list files in an assistant
  * get-assistant-file    get info about a file in an assistant
  * delete-assistant-file delete a file from an assistant

## Threads
  * start-thread          start a new thread
  * get-thread            get info about a thread
  * modify-thread         modify a thread
  * delete-thread         delete a thread

## Messages
  * add-message           add a message to a thread
  * modify-message        modify a message in a thread
  * list-messages         list messages in a thread
  * get-message           get info about a message in a thread

## Thread runs
  * run-thread            starts running a thread
  * list-runs             list runs for a thread
  * get-run               get info about a thread's run
  * modify-run            modify a thread's run
  * cancel-run            cancel a thread's run

## Run steps
  * list-steps            list steps for a thread's run
  * get-step              get info about a thread's run step

_Each command has its own set of options. Run '$PROGRAM COMMAND --help' for
more information._

# Environmental variables

  * OPENAI_API_KEY        your OpenAI API key (required; create one at https://beta.openai.com/account/api-keys)
  * OPENAI_MODEL          the model to use; defaults to gpt-3.5-turbo-16k

# See also
  * [API docs](https://platform.openai.com/docs/api-reference/assistants)

EOL

  exit "$exit_code"
}

info() {
  gum style --foreground="#00FF00" "$PROGRAM: $*" >&2
}

warn() {
  local msg="${1:-something went wrong}"
  gum style --foreground="#FF0000" "$PROGRAM: $msg" >&2
}

die() {
  warn "$@"
  exit 1
}

validate-env() {
  local tools=("curl" "jq" "gum")
  local cmd

  for cmd in "${tools[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
      echo "$cmd is not installed" >&2
      exit 1
    fi
  done

  if [ -z "${OPENAI_API_KEY:-}" ]; then
    die "OPENAI_API_KEY is not set in the environment"
  elif [[ ! "$OPENAI_API_KEY" =~ ^sk-[a-zA-Z0-9]{32,64}$ ]]; then
    die "OPENAI_API_KEY is not a valid key"
  fi

  return 0
}

# ------------------------------------------------------------------------------
# if get-flag --flag "$@"; then
#   ...
# fi
# ------------------------------------------------------------------------------
get-flag() {
  local flag="$1"

  for param in "${@:2}"; do
    if [[ "$param" == "$flag" ]]; then
      return 0
    fi
  done

  return 1
}

# ------------------------------------------------------------------------------
# flag_value=$(get-config --flag "$@") || die "missing --flag"
# ------------------------------------------------------------------------------
get-config() {
  local name="$1"
  local capture=false
  local param

  for param in "${@:2}"; do
    if [[ "$capture" == true ]]; then
      echo "$param"
      return 0
    elif [[ "$param" == "$name" ]]; then
      capture=true
    fi
  done

  return 1
}

# ------------------------------------------------------------------------------
# declare -a flag_values
# get-config-multi --flag flag_values "$@" || die "missing --flag"
# ------------------------------------------------------------------------------
get-config-multi() {
  local name="$1"
  local -n return_var="$2"
  local param
  local capture_next=false

  return_var=() # Clear the array to store results

  for param in "${@:3}"; do
    if [[ "$capture_next" == true ]]; then
      return_var+=("$param")
      capture_next=false
      continue
    fi

    if [[ "$param" == "$name" ]]; then
      capture_next=true
    elif [[ "$param" =~ ^$name=.+ ]]; then
      return_var+=("${param#*=}")
    fi
  done

  [[ ${#return_var[@]} -eq 0 ]] && return 1
}

request() {
  local response
  response=$(curl -s "$@") || die "API connection error"
  response-ok "$response"
  echo "$response"
}

response-ok() {
  if jq -e 'has("error")' <<< "$1" > /dev/null; then
    die "$(echo "$1" | jq -r '.error.message')"
  fi

  return 0
}

payload-meta() {
  local -n payload_var="$1"
  shift # Shift the arguments left to remove the first one.

  declare -a metas
  get-config-multi --meta metas "$@" || true

  if [[ ${#metas[@]} -gt 0 ]]; then
    metadata=$(printf '%s\n' "${metas[@]}" | jq -R 'split("=") | {(.[0]): .[1]}' | jq -s 'add')
    payload_var=$(jq --argjson metadata "$metadata" '. + {metadata: $metadata}' <<< "$payload_var")
  fi
}

# ------------------------------------------------------------------------------
# Commands
# ------------------------------------------------------------------------------
cmd:list-files() {
  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-files

options:
  --help            show help information
EOL

    exit 0
  fi

  request https://api.openai.com/v1/files \
    -H "Authorization: Bearer $OPENAI_API_KEY"
}

cmd:upload-file() {
  local file

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM upload-file

options:
  --help            show help information
  --file            the file to upload (required)
EOL

    exit 0
  fi

  file=$(get-config --file "$@") || die "upload-file: expected --file"

  if [ ! -f "$file" ]; then
    die "upload-file: file does not exist - $file"
  fi

  request https://api.openai.com/v1/files \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -F purpose="assistants" \
    -F file="@$file"
}

cmd:delete-file() {
  local file

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM delete-file

options:
  --help            show help information
  --file            the id of the file (required)
EOL

    exit 0
  fi

  file=$(get-config --file "$@") || die "delete-file: expected --file"

  request "https://api.openai.com/v1/files/$file" \
    -X DELETE \
    -H "Authorization: Bearer $OPENAI_API_KEY"
}

cmd:retrieve-file() {
  local file

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM retrieve-file

options:
  --help            show help information
  --file            the id of the file (required)
EOL

    exit 0
  fi

  file=$(get-config --file "$@") || die "retrieve-file: expected --file"

  request "https://api.openai.com/v1/files/$file" \
    -H "Authorization: Bearer $OPENAI_API_KEY"
}

cmd:create-assistant() {
  local name
  local instructions
  local description
  local model
  local payload

  declare -a files
  declare -a tools

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM create-assistant [OPTIONS]

options:
  --help            show help information
  --name            the name of the assistant (required)
  --instructions    the instructions for the assistant (required)
  --description     the description of the assistant
  --model           the name of the model to use; defaults to \$OPENAI_MODEL
  --tools           the name of tools to enable; can be specified multiple times; current options are 'code_interpreter', 'retrieval', and 'function'
  --file            the id of files to include; can be specified multiple times
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  name=$(get-config --name "$@") || die "create-assistant: expected --name"
  instructions=$(get-config --instructions "$@") || die "create-assistant: expected --instructions"
  description=$(get-config --description "$@") || true
  model=$(get-config --model "$@") || true
  get-config-multi --tool tools "$@" || true
  get-config-multi --file files "$@" || true

  if [ -z "$model" ]; then
    model="$OPENAI_MODEL"
  fi

  payload=$(jq -n '{}')
  payload=$(jq --arg x "$model" '. + {"model": $x}' <<< "$payload")
  payload=$(jq --arg x "$name" '. + {"name": $x}' <<< "$payload")
  payload=$(jq --arg x "$instructions" '. + {"instructions": $x}' <<< "$payload")
  payload-meta payload "$@"

  if [ -n "$description" ]; then
    payload=$(jq --arg x "$description" '. + {"description": $x}' <<< "$payload")
  fi

  if [[ ${#files[@]} -gt 0 ]]; then
    payload=$(jq --argjson x "$(printf '%s\n' "${files[@]}" | jq -R . | jq -s .)" '. + {file_ids: $x}' <<< "$payload")
  fi

  if [[ ${#tools[@]} -gt 0 ]]; then
    payload=$(jq --argjson tools "$(printf '%s\n' "${tools[@]}" | jq -R '{type: .}' | jq -s .)" '. + {tools: $tools}' <<< "$payload")
  fi

  request https://api.openai.com/v1/assistants \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:modify-assistant() {
  local assistant
  local name
  local instructions
  local description
  local model
  local payload

  declare -a files
  declare -a tools

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM modify-assistant [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
  --name            the name of the assistant
  --instructions    the instructions for the assistant
  --description     the description of the assistant
  --model           the name of the model to use; defaults to \$OPENAI_MODEL
  --tools           the name of tools to enable; can be specified multiple times; current options are 'code_interpreter', 'retrieval', and 'function'
  --file            the id of files to include; can be specified multiple times
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "modify-assistant: expected --assistant"
  name=$(get-config --name "$@") || true
  instructions=$(get-config --instructions "$@") || true
  description=$(get-config --description "$@") || true
  model=$(get-config --model "$@") || true
  get-config-multi --tool tools "$@" || true
  get-config-multi --file files "$@" || true

  if [ -z "$model" ]; then
    model="$OPENAI_MODEL"
  fi

  payload=$(jq -n '{}')
  payload=$(jq --arg x "$model" '. + {"model": $x}' <<< "$payload")
  payload=$(jq --arg x "$name" '. + {"name": $x}' <<< "$payload")
  payload=$(jq --arg x "$instructions" '. + {"instructions": $x}' <<< "$payload")
  payload-meta payload "$@"

  if [ -n "$description" ]; then
    payload=$(jq --arg x "$description" '. + {"description": $x}' <<< "$payload")
  fi

  if [[ ${#files[@]} -gt 0 ]]; then
    payload=$(jq --argjson x "$(printf '%s\n' "${files[@]}" | jq -R . | jq -s .)" '. + {file_ids: $x}' <<< "$payload")
  fi

  if [[ ${#tools[@]} -gt 0 ]]; then
    payload=$(jq --argjson tools "$(printf '%s\n' "${tools[@]}" | jq -R '{type: .}' | jq -s .)" '. + {tools: $tools}' <<< "$payload")
  fi

  request "https://api.openai.com/v1/assistants/$assistant" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:get-assistant() {
  local assistant

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-assistant [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "get-assistant: expected --assistant"

  request "https://api.openai.com/v1/assistants/$assistant" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:list-assistants() {
  local order
  local limit
  local after
  local before
  local query
  local endpoint

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-assistants

options:
  --help            show help information
  --order           asc or desc (by data[].created_at)
  --limit           the number of assistants to return (default: 20)
  --after           a cursor to use for pagination (based on data[].id)
  --before          a cursor to use for pagination (based on data[].id)
EOL

    exit 0
  fi

  order=$(get-config --order "$@") || true
  limit=$(get-config --limit "$@") || true
  after=$(get-config --after "$@") || true
  before=$(get-config --before "$@") || true

  query=""

  if [ -n "$order" ]; then
    query="$query&order=$order"
  fi

  if [ -n "$limit" ]; then
    query="$query&limit=$limit"
  fi

  if [ -n "$after" ]; then
    query="$query&after=$after"
  fi

  if [ -n "$before" ]; then
    query="$query&before=$before"
  fi

  endpoint="https://api.openai.com/v1/assistants"

  if [ -n "$query" ]; then
    endpoint="$endpoint?$query"
  fi

  request "$endpoint" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:delete-assistant() {
  local assistant

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM delete-assistant [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "delete-assistant: expected --assistant"

  request "https://api.openai.com/v1/assistants/$assistant" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -X DELETE
}

cmd:add-assistant-file() {
  local assistant
  local file
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM add-assistant-file [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
  --file            the id of the file (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "add-assistant-file: expected --assistant"
  file=$(get-config --file "$@") || die "add-assistant-file: expected --file"

  payload=$(jq -n '{}')
  payload=$(jq --arg x "$file" '. + {"file_id": $x}' <<< "$payload")

  request "https://api.openai.com/v1/assistants/$assistant/files" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1' \
    -d "$payload"
}

cmd:get-assistant-file() {
  local assistant
  local file

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-assistant-file [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
  --file            the id of the file (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "get-assistant-file: expected --assistant"
  file=$(get-config --file "$@") || die "get-assistant-file: expected --file"

  request "https://api.openai.com/v1/assistants/$assistant/files/$file" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1'
}

cmd:delete-assistant-file() {
  local assistant
  local file

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM delete-assistant-file [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
  --file            the id of the file (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "get-assistant-file: expected --assistant"
  file=$(get-config --file "$@") || die "get-assistant-file: expected --file"

  request "https://api.openai.com/v1/assistants/$assistant/files/$file" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1' \
    -X DELETE
}

cmd:list-assistant-files() {
  local assistant
  local order
  local limit
  local after
  local before
  local query
  local endpoint

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-assistant-files

options:
  --help            show help information
  --order           asc or desc (by data[].created_at)
  --limit           the number of entries to return (default: 20)
  --after           a cursor to use for pagination (based on data[].id)
  --before          a cursor to use for pagination (based on data[].id)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "list-assistant-files: expected --assistant"
  order=$(get-config --order "$@") || true
  limit=$(get-config --limit "$@") || true
  after=$(get-config --after "$@") || true
  before=$(get-config --before "$@") || true

  query=""

  if [ -n "$order" ]; then
    query="$query&order=$order"
  fi

  if [ -n "$limit" ]; then
    query="$query&limit=$limit"
  fi

  if [ -n "$after" ]; then
    query="$query&after=$after"
  fi

  if [ -n "$before" ]; then
    query="$query&before=$before"
  fi

  endpoint="https://api.openai.com/v1/assistants/$assistant/files"

  if [ -n "$query" ]; then
    endpoint="$endpoint?$query"
  fi

  request "$endpoint" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:start-thread() {
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM start-thread [OPTIONS]

options:
  --help            show help information
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request https://api.openai.com/v1/threads \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:modify-thread() {
  local thread
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM modify-thread [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "modify-thread: expected --thread"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "https://api.openai.com/v1/threads/$thread" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:delete-thread() {
  local thread

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM delete-thread [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "delete-assistant: expected --thread"

  request "https://api.openai.com/v1/threads/$thread" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -X DELETE
}

cmd:get-thread() {
  local thread

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-thread [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "delete-assistant: expected --thread"

  request "https://api.openai.com/v1/threads/$thread" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:add-message() {
  local thread
  local content
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM add-message [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --content         the message to add (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "add-message: expected --thread"
  content=$(get-config --content "$@") || die "add-message: expected --content"

  payload=$(jq -n '{"role": "user"}')
  payload=$(jq --arg x "$content" '. + {"content": $x}' <<< "$payload")

  request "https://api.openai.com/v1/threads/$thread/messages" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:modify-message() {
  local thread
  local message
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM modify-message [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --message         the id of the message (required)
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "modify-message: expected --thread"
  message=$(get-config --message "$@") || die "modify-message: expected --message"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "https://api.openai.com/v1/threads/$thread/messages/$message" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1" \
    -d "$payload"
}

cmd:get-message() {
  local thread
  local message

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-message [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --message         the id of the message (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "get-message: expected --thread"
  message=$(get-config --message "$@") || die "get-message: expected --message"

  request "https://api.openai.com/v1/threads/$thread/messages/$message" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:list-messages() {
  local thread

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-messages [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "add-message: expected --thread"

  request "https://api.openai.com/v1/threads/$thread/messages" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "OpenAI-Beta: assistants=v1"
}

cmd:run-thread() {
  local assistant
  local thread

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM run-thread [OPTIONS]

options:
  --help            show help information
  --assistant       the id of the assistant (required)
  --thread          the id of the thread (required)
EOL

    exit 0
  fi

  assistant=$(get-config --assistant "$@") || die "run-thread: expected --assistant"
  thread=$(get-config --thread "$@") || die "run-thread: expected --thread"

  request "https://api.openai.com/v1/threads/$thread/runs" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1' \
    -d "{\"assistant_id\": \"$assistant\"}"
}

cmd:list-runs() {
  local thread

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-runs [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "list-runs: expected --thread"

  request "https://api.openai.com/v1/threads/$thread/runs" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1'
}

cmd:get-run() {
  local thread
  local run

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-run [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --run             the id of the run (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "get-run: expected --thread"
  run=$(get-config --run "$@") || die "get-run: expected --run"

  request "https://api.openai.com/v1/threads/$thread/runs/$run" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'OpenAI-Beta: assistants=v1'
}

cmd:modify-run() {
  local thread
  local run
  local payload

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM modify-run [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --run             the id of the run (required)
  --meta            the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "get-run: expected --thread"
  run=$(get-config --run "$@") || die "get-run: expected --run"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "https://api.openai.com/v1/threads/$thread/runs/$run" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1' \
    -d "$payload"
}

cmd:cancel-run() {
  local thread
  local run

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM cancel-run [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --run             the id of the run (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "cancel-run: expected --thread"
  run=$(get-config --run "$@") || die "cancel-run: expected --run"

  request "https://api.openai.com/v1/threads/$thread/runs/$run/cancel" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'OpenAI-Beta: assistants=v1' \
    -X POST
}

cmd:list-steps() {
  local thread
  local run

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM list-steps [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --run             the id of the run (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "list-steps: expected --thread"
  run=$(get-config --run "$@") || die "list-steps: expected --run"

  request "https://api.openai.com/v1/threads/$thread/runs/$run/steps" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1'
}

cmd:get-step() {
  local thread
  local run
  local step

  if get-flag --help "$@"; then
    cat << EOL
usage: $PROGRAM get-step [OPTIONS]

options:
  --help            show help information
  --thread          the id of the thread (required)
  --run             the id of the run (required)
  --step            the id of the step (required)
EOL

    exit 0
  fi

  thread=$(get-config --thread "$@") || die "cancel-run: expected --thread"
  run=$(get-config --run "$@") || die "cancel-run: expected --run"
  step=$(get-config --step "$@") || die "cancel-run: expected --step"

  request "https://api.openai.com/v1/threads/$thread/runs/$run/steps/$step" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H 'Content-Type: application/json' \
    -H 'OpenAI-Beta: assistants=v1'
}

main() {
  local options

  validate-env

  if [ "$#" -eq 0 ]; then
    usage 1
  fi

  options=$(declare -F | grep '^declare -f cmd:' | cut -d ' ' -f 3)

  for option in $options; do
    flag=${option#cmd:}

    if get-flag "$flag" "$@"; then
      "$option" "${@:2}"
      exit 0
    fi
  done

  if get-flag --help "$@"; then
    usage 0
  fi
}

main "$@"
